#include <string>
#include <vector>
#include <iostream>

#include "Vertex.h"
#include "Edge.h"
#include "Graph.h"
#include "BFS.h"
#include "FullBFS.h"
#include "SCCGraph.h"
#include "Mock.h"

#include "catch.hpp"


TEST_CASE("Loading the first part of the wiki dataset works") {
    Graph gIO = Graph("./tests/mock-data/Vertices.csv", "./tests/mock-data/Edges.txt");
    CHECK(gIO.num_vertices < 20);
}

TEST_CASE("Loading data automatically generated by the python script works") {
    Graph gIO = Graph("./tests/mock-data/pre-gen-names.csv", "./tests/mock-data/pre-gen-edges.txt");
    CHECK(gIO.num_vertices == 10);
    CHECK(gIO.num_edges == 30);
}

TEST_CASE("BFS Shortest Path queried by strings returns correct path if path exists", "[UI]") {
    Graph g;
    insertBasicCycle(g, 0);
    std::string start = "0";
    std::string end = "3";
    auto path = g.getShortestPath(g.vertices.at(g.page_to_id.at(start)), g.vertices.at(g.page_to_id.at(end)));
    for (auto p : path) {
        std::cout << p.source_node_id_ << "->" << p.destination_node_id_ << '\n';
    }
    REQUIRE(path.size() == 3);
}

TEST_CASE("The graph can find string keys generated from a vertex file", "[UI]") {
    Graph g("./tests/mock-data/scc-examples/scc-names-rand.csv", "./tests/mock-data/scc-examples/scc-edges-rand.txt");
    // for (auto pair : g.page_to_id) {
    //     std::cout << '<' << pair.first << "> @ " << pair.second << '\n';
    // }
    CHECK(g.page_to_id.size() != 0);
    CHECK(g.page_to_id.find("Hequfegoho a") != g.page_to_id.end());
    CHECK(g.page_to_id.find("Moxaz,yunobe") != g.page_to_id.end());
    CHECK(g.page_to_id.find("Gitoxugesido") != g.page_to_id.end());
    CHECK(g.page_to_id.find("Hasina,fefit") != g.page_to_id.end());
    CHECK(g.page_to_id.find("Otoyahumirig") != g.page_to_id.end());
}